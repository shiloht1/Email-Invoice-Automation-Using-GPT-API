import imaplib
import email
import os
from email.header import decode_header
from datetime import datetime, timedelta

# Initialize debugging information
print("Starting the email fetching process...")

# Create Gmail_Data folder if it doesn't exist
folder_name = "Gmail_Data"
if not os.path.exists(folder_name):
    os.makedirs(folder_name)

# Connect to email server
print("Connecting to IMAP server...")
imap = imaplib.IMAP4_SSL("imap.gmail.com")
print("Connected to IMAP server.")

# Login
print("Logging into email account...")
imap.login("your_email@example.com", "your_password")
print("Successfully logged in.")

# Select mailbox
print("Selecting inbox...")
imap.select("inbox")
print("Inbox selected.")

# Calculate date 8 months ago and convert to string
date_eight_months_ago = (datetime.now() - timedelta(days=8*30)).strftime("%d-%b-%Y")
print(f"Fetching emails since {date_eight_months_ago}...")

# Search for all emails since date_eight_months_ago
status, messages = imap.search(None, f'(SINCE {date_eight_months_ago})')
if status == 'OK':
    print(f"Search complete. Number of emails found: {len(messages[0].split())}")
else:
    print("Search failed.")
    exit()

# Process each email
email_ids = messages[0].split()
for email_id in email_ids:
    print(f"Fetching email ID: {email_id.decode('utf-8')}...")
    status, msg_data = imap.fetch(email_id, "(RFC822)")
    raw_email = msg_data[0][1]

    # Parse email
    print("Parsing email...")
    msg = email.message_from_bytes(raw_email)
    print("Email parsed.")

    # Look for attachments (inside the email processing loop)
    print("Looking for attachments...")
    if msg.is_multipart():
        for part in msg.walk():
            filename = part.get_filename()
            if not filename:
                print("No filename found for this part. Skipping...")
                continue

            # Decode MIME-encoded filename
            header, encoding = decode_header(filename)[0]
            if encoding:
                try:
                    decoded_filename = header.decode(encoding)
                except Exception as e:
                    print(f"Error decoding filename: {filename}. Exception: {e}. Using original filename as fallback...")
                    decoded_filename = filename
            else:
                decoded_filename = header

            # Check for invalid characters in filename and sanitize
            invalid_chars = set('<>:\"/\\|?*')
            sanitized_filename = ''.join(c if c not in invalid_chars else '_' for c in decoded_filename)

            # Check if the payload is valid
            payload = part.get_payload(decode=True)
            if not payload:
                print(f"Attachment {sanitized_filename} has no data. Skipping...")
                continue

            filepath = os.path.join(folder_name, sanitized_filename)
            print(f"Found attachment: {sanitized_filename}. Downloading to {filepath}...")
            with open(filepath, "wb") as f:
                f.write(payload)
            print(f"Attachment downloaded to {filepath}.")
    else:
        print("This email is not multipart. Skipping...")

print("Email fetching process completed.")

!pip install pdf2image
!pip install pytesseract

import os
from pdf2image import convert_from_path
import pytesseract

# Define the path to the Gmail_Data folder and the PDF file
pdf_folder = "Gmail_Data"
pdf_filename = "1012787.pdf"
pdf_path = os.path.join(pdf_folder, pdf_filename)

# Path to poppler's bin directory
poppler_bin_path = "C:\\Users\\Shiloh\\Downloads\\Release-23.08.0-0\\poppler-23.08.0\\Library\\bin"

# Convert the PDF to images
pages = convert_from_path(pdf_path, dpi=300, poppler_path=poppler_bin_path)

# Extract text from each image
extracted_texts = []
for page in pages:
    text = pytesseract.image_to_string(page)
    extracted_texts.append(text)

# Join the extracted texts
ocr_output = "\n".join(extracted_texts)

#print(complete_text)

!pip install openai

import openai

# Define your OpenAI API key here
api_key = "Your API"

# Initialize the OpenAI client
openai.api_key = api_key

# Define the prompt for GPT-3. We will use the OCR output as part of the prompt.
prompt_text = f"Extract from the following invoice data: {ocr_output} the total amount of the invoice, the WK ending date, and the names of the employees that worked there may be repeated names if so just send one reply per unique name."

# Call the Completion API
response = openai.Completion.create(
    engine="text-davinci-003",
    prompt=prompt_text,
    max_tokens=150
)

# Print the response from GPT-3
print(response.choices[0].text.strip())
